<?php
#[\AllowDynamicProperties]
class OCVMNotifications {

	use OCVMVulnerabilities;

	private $settings;
	public $notices            = [];
	const dismissFlag          = 'ocvm_ignore_%s_notice_%s';
	const DISMISS_NOTIFICATION = 24;
	public $noticeHTML;


	// this to be called on admin page in wp-admin
	public function __construct() {
		$this->settings   = new OCVMSettings();
		$this->noticeHTML = $this->settings->templateDir . "/partials/notice.html";
	}

	/**
	 * Get FQN of plugin by slug
	 * @param $slug string Theme's stylesheet or Plugin's PHP dir name
	 * @return string Name of the plugin/theme
	 */
	public function get_name_for_slug($slug, $type): string {
		// If core, return empty string
		if ( "wp" === $type ) {
			return '';
		}

		if ( "themes" === $type ) {
			// theme headers
			$themeData = wp_get_theme($slug);
			return $themeData->get('Name');
		}

		require_once ABSPATH . 'wp-admin/includes/plugin.php';
		$plugin_files = get_plugins('/' . $slug);
		if ( ! $plugin_files ) {
			return '';
		}
		$plugin_files = array_keys($plugin_files);
		$plugin_dir   = $slug . '/' . reset($plugin_files);
		$pluginData   = get_plugin_data(trailingslashit(WP_PLUGIN_DIR) . $plugin_dir);
		return $pluginData['Name'];
	}

	/**
	 * Prepare notifications
	 * @param int $expanded
	 * @return string notice html
	 */
	public function notificationHTML($expanded = 0) {
		$allPageClass  = (0 === $expanded) ? "allpageNotification" : "";
		$alinkOpen     = "<a href={{update_link}}>";
		$notifications = '<div id="ocvm-parent-wrap" class="' . $allPageClass . '">
            <div class="one_wrap wrap">
                <ul class="vulnerabilities">';
		foreach ( $this->notices as $notice ) {
			$singleItem = file_get_contents($this->noticeHTML, true);
			$slug_name  = $notice['slug'];
			$typeText   = '';

			// slug_vul_description
			if ( "wp" == $notice['type'] ) {
				$desc        = __("Outdated WordPress core make your site vulnerable to security attacks. You should consider updating to the latest version.", OC_PLUGIN_DOMAIN);
				$generalDesc = sprintf(__("WordPress core updates are managed from the Updates section in WP Admin. %sGo to Dashboard > Updates%s to do it manually.", OC_PLUGIN_DOMAIN), $alinkOpen, "</a>");
				$btnTitle    = __("Update WordPress", OC_PLUGIN_DOMAIN);
				$typeText    = "core";
				$slug_name   = "WordPress";

			} else if ( "plugins" == $notice['type'] ) {
				$desc        = __("Outdated plugins make your site vulnerable to security attacks. You should also delete plugins you do not use.", OC_PLUGIN_DOMAIN);
				$generalDesc = sprintf(__("Go to %sWP Admin > Updates%s and update all plugins for which a newer version is available.", OC_PLUGIN_DOMAIN), $alinkOpen, "</a>");
				$btnTitle    = __("Update Plugin", OC_PLUGIN_DOMAIN);
			} else {
				$desc        = __("Outdated themes make your site vulnerable to security attacks. You should also delete themes you do not use.", OC_PLUGIN_DOMAIN);
				$generalDesc = sprintf(__("Go to %sWP Admin > Updates%s and update all themes for which a newer version is available.", OC_PLUGIN_DOMAIN), $alinkOpen, "</a>");

				$btnTitle = __("Update Theme", OC_PLUGIN_DOMAIN);
			}

			//vulnerability version details


			$fixed_version_num     = isset($notice['fixed_in']) && ! empty($notice['fixed_in']) ? $notice['fixed_in'] : __("Not available");
			$installed_version_num = isset($notice['installed_version']) ? $notice['installed_version'] : '';
			$is_exploited          = isset($notice['is_exploited']) ? $notice['is_exploited'] : false;
			$vul_severity          = $this->get_vul_severity($notice['cvss_score']);
			$vul_exploitable       = $this->vul_is_exploitable($is_exploited);

			// Replace template variables with dynamic text/translation
			$singleItem = strtr($singleItem, array(
				"{{current_version_text}}"   => __("Current version", OC_PLUGIN_DOMAIN),
				"{{current_version_no}}"     => $installed_version_num,
				"{{fix_version_text}}"       => __("Fix version", OC_PLUGIN_DOMAIN),
				"{{fix_version_no}}"         => $fixed_version_num,
				"{{slug_vul_description}}"   => $desc,
				"{{slug}}"                   => $notice['slug'],
				"{{slug_name}}"              => $this->get_name_for_slug($notice['slug'], $notice['type']),
				"{{type}}"                   => $typeText,
				"{{general_desc}}"           => $generalDesc,
				"{{button_title}}"           => $btnTitle,
				"{{how_to_fix}}"             => __("How to fix", OC_PLUGIN_DOMAIN),
				"{{vulnerable_due_to}}"      => __("Your website is vulnerable due to", OC_PLUGIN_DOMAIN),
				"{{vul_severity_label}}"     => __($vul_severity['label'], OC_PLUGIN_DOMAIN),
				"{{vul_severity_class}}"     => $vul_severity['class'],
				"{{vulnerabilities_text}}"   => __("Vulnerabilities", OC_PLUGIN_DOMAIN),
				"{{vuln_exploited_label}}"   => __($vul_exploitable['label'], OC_PLUGIN_DOMAIN),
				"{{vuln_exploited_class}}"   => $vul_exploitable['class'],
				"{{vuln_exploited_tooltip}}" => $vul_exploitable['tooltip'],
			));

			// actions hidden
			$singleItem = str_replace(
				"{{actions_hidden}}",
				1 === $expanded ? 'style="display:none;"' : '',
				$singleItem
			);


			//Do not show this again
			$singleItem = str_replace("{{do_not_show_again}}", __('Do not show this again', OC_PLUGIN_DOMAIN), $singleItem);

			// expanded
			$singleItem = str_replace(
				"{{expanded}}",
				((1 === $expanded) ? "expanded" : ""),
				$singleItem
			);

			// current user id
			$singleItem = str_replace("{{uid}}", get_current_user_id(), $singleItem);

			//update link
			// Go to admin area
			$redirect_page  = is_multisite() ? get_admin_url() : admin_url();
			$redirect_page .= 'update-core.php?force-check=1';
			$singleItem     = str_replace("{{update_link}}", $redirect_page, $singleItem);

			$settings = $this->settings->get();
			$vuls     = $settings['vulnerabilities'];

			if ( "wp" === $notice['type'] ) {
				$itemVuls = $vuls[$notice['type']]['vulnerabilities'];
			} else {
				$itemVuls = $vuls[$notice['type']][$notice['slug']]['vulnerabilities'];
			}

			// slug_vuls
			$itemVulsHTML = '<ul>';
			foreach ( $itemVuls as $vul ) {
				// modified to manipulate the vuln_type for new API
				$vtype = "wp_vul_" . strtolower(str_replace([" ", "(", ")"], ["_", "", ""], $vul['vuln_type']));
				// if vuln_type is not found in trait then fallback to the description
				if ( $this->vulTranslation($vtype) !== '' ) {
					$desc = $this->vulTranslation($vtype);
				} elseif ( $this->vulTranslation($vtype) === '' && isset($vul['description']) ) {
					$desc = $vul['description'];

				} else {
					$desc = __('wp_vul_unknown', OC_PLUGIN_DOMAIN);

				}
				$itemVulsHTML .= sprintf("<li>%s <br /><a href='%s' target='_blank'>%s</a></li>", $desc, $vul['url'], __('See more details', OC_PLUGIN_DOMAIN));
			}
			$itemVulsHTML .= '</ul>';

			$singleItem = str_replace("{{slug_vuls}}", $itemVulsHTML, $singleItem);

			$notifications .= $singleItem;

		}

		$notifications .= "</ul>
        </div>
        </div>";

		return $notifications;

	}

	/**
	 * Returns vulnerability severity level: critical, high, medium or low
	 */
	public function get_vul_severity($cvss): array {
		$vul_severity = array();
		if ( $cvss < 4 ) {
			$vul_severity['label'] = 'Low';
			$vul_severity['class'] = 'vm_severity_low';
		} else if ( $cvss < 7 ) {
			$vul_severity['label'] = 'Medium';
			$vul_severity['class'] = 'vm_severity_medium';
		} else if ( $cvss < 9 ) {
			$vul_severity['label'] = 'High';
			$vul_severity['class'] = 'vm_severity_high';
		} else {
			$vul_severity['label'] = 'Critical';
			$vul_severity['class'] = 'vm_severity_critical';
		}

		return $vul_severity;
	}


	/**
	 * Determines if a vulnerability is exploitable or not.
	 *
	 * @param bool $exploited Whether the vulnerability is exploited or not.
	 *
	 * @return array An associative array containing information about the vulnerability's exploitability:
	 *   - 'label'   (string) The label indicating exploitability ('Exploitable' or empty string).
	 *   - 'class'   (string) The CSS class to apply ('oc_vm_exploitable' or 'oc_vm_none').
	 *   - 'tooltip' (string) The tooltip message describing the exploitability status.
	 */
	public function vul_is_exploitable($exploited): array {
		$exploitable = array();
		if ( $exploited ) {
			$exploitable['label']   = 'Exploitable';
			$exploitable['class']   = 'oc_vm_exploitable';
			$exploitable['tooltip'] = __('Vulnerability is known to be exploited', OC_PLUGIN_DOMAIN);
		}else {
			$exploitable['label']   = '';
			$exploitable['class']   = 'oc_vm_none';
			$exploitable['tooltip'] = '';
		}

		return $exploitable;
	}

	/**
	 * Check if a notice is dismissed
	 */
	public function isDismissed($slug): int {
		return get_site_transient(
			sprintf(self::dismissFlag, $slug, get_current_user_id())
		);
	}

	/**
	 * Is item still active
	 */
	public function isActive($item, $vuls): bool {
		//seat belt
		if ( empty($item) ) {
			return false;
		}

		if ( "plugins" === $item['type'] ) {

			// exit if the plugin is not installed
			if ( ! $this->isInstalled($item) ) {
				return false;
			}

			if ( ! function_exists('get_plugins') ) {
				require_once ABSPATH . 'wp-admin/includes/plugin.php';
			}

			// get details of installed plugin by its slug
			$plugin_files = get_plugins('/' . $item['slug']);

			// get plugin name (array)
			$single_plugin = array_keys($plugin_files);

			$plugin_path = $item['slug'] . '/' . reset($single_plugin);

			// exit if the plugin is not active
			if ( false === is_plugin_active($plugin_path) ) {
				return false;
			}

			// check if plugin's current active version matches the vulnerable version
			if ( ! empty($vuls) && ! empty($vuls[$item['type']][$item['slug']]) ) {

				// get plugin version of first plugin by its name
				$plugin_installed_ver  = $plugin_files[reset($single_plugin)]['Version'];
				$plugin_vulnerable_ver = $vuls[$item['type']][$item['slug']]['installed_version'];

				if ( version_compare($plugin_installed_ver, $plugin_vulnerable_ver) > 0 ) {
					return false;
				}
			}

			return true;

		} else if ( "themes" === $item['type'] ) {
			// exit if the theme is not installed
			if ( ! $this->isInstalled($item) ) {
				return false;
			}
			return $item['slug'] === get_option('template');
		} else if ( "wp" === $item['type'] ) {
			// exit if core is already on fixed or higher version
			if ( version_compare($item['installed_version'], $item['fixed_in']) >= 0 ) {
				return false;
			}
			return true;
		} else {
			// type == wp
			return true;
		}

	}

	/**
	 * WPIN-3470: Is item (theme/plugin) installed
	 */
	public function isInstalled($item): bool {

		if ( "plugins" === $item['type'] ) {

			if ( ! function_exists('get_plugins') ) {
				require_once ABSPATH . 'wp-admin/includes/plugin.php';
			}

			// Get all installed plugins
			$plugins = get_plugins();

			// Check if the plugin is installed
			$plugin_installed = false;
			foreach ( $plugins as $plugin_file => $plugin_data ) {
				$folder_name = dirname($plugin_file);
				if ( $folder_name === $item['slug'] ) {
					$plugin_installed = true;
					break;
				}
			}

			// Return false if plugin is not installed
			if ( ! $plugin_installed ) {
				return false;
			}

		} else if ( "themes" === $item['type'] ) {

			// Return false if the theme is not installed
			$installed_themes = wp_get_themes();
			if ( ! isset($installed_themes[$item['slug']]) ) {
				return false;
			}

		}

		// Default true (assuming plugin or theme is installed)
		return true;
	}

	/**
	 * Array iterator
	 * @param $items array
	 * @return void
	 */
	public function arrayIterate($items, $type = '', $vuls = array()): void {
		if ( ! empty($items) ) {
			foreach ( $items as $slug ) {
				// Get highest cvss_score for all vulnerabilities of the item, if not found or non-numeric, set default 10
				if ( ! empty(array_column($vuls[$type][$slug]['vulnerabilities'], 'cvss_score')) ) {
					$cvss_score = max(array_column($vuls[$type][$slug]['vulnerabilities'], 'cvss_score'));
				} else {
					$cvss_score = 10;
				}
				$is_exploited = false;
					if ( $this->settings->isPremium() && isset($vuls[$type][$slug]['vulnerabilities']) && is_array($vuls[$type][$slug]['vulnerabilities']) ) {
						foreach ( $vuls[$type][$slug]['vulnerabilities'] as $vuln ) {
							if ( isset($vuln['is_exploited']) && $vuln['is_exploited'] == 1 ) {
								$is_exploited = true;
								break; // Exit the loop as soon as an exploited vulnerability is found
							}
						}
					}

				$this->notices[] = array(
					'slug'              => $slug,
					'dismissed'         => (int)$this->isDismissed($slug),
					'type'              => $type,
					'fixed_in'          => isset($vuls[$type][$slug]['fixed_in']) ? $vuls[$type][$slug]['fixed_in'] : '',
					'installed_version' => isset($vuls[$type][$slug]['installed_version']) ? $vuls[$type][$slug]['installed_version'] : '',
					'cvss_score'        => is_numeric($cvss_score) ? $cvss_score : 10,
					'is_exploited'      =>  $is_exploited,
				);
			}
		}
	}

	/**
	 * Prepare notifications to be displayed
	 * @return void
	 */
	public function prepareNotifications($show_dismissed = 0): void {
		$settings = $this->settings->get();
		$vuls     = empty($settings['vulnerabilities']) ? array() : $settings['vulnerabilities'];

		// in order to follow a default structure
		$vuls = array_merge(array('themes' => [], 'plugins' => [], 'wp' => []), $vuls);

		// collect wp vulnerabilities
		if ( ! empty($vuls['wp']['vulnerabilities']) ) {
			global $wp_version;
			// Get highest cvss_score for all vulnerabilities of the item, if not found, set default 10
			if ( ! empty(array_column($vuls['wp']['vulnerabilities'], 'cvss_score')) ) {
				$cvss_score = max(array_column($vuls['wp']['vulnerabilities'], 'cvss_score'));
			} else {
				$cvss_score = 10;
			}
			$this->notices[] = array(
				'slug'              => 'wp',
				'dismissed'         => $this->isDismissed('wp'),
				'type'              => 'wp',
				'fixed_in'          => max(array_column($vuls['wp']['vulnerabilities'], 'fixed_in')),
				'installed_version' => $wp_version,
				'cvss_score'        => is_numeric($cvss_score) ? $cvss_score : 10,
			);
		}

		// collect plugins vulnerabilities
		if ( ! empty($vuls['plugins']) ) {
			$this->arrayIterate(array_keys((array)$vuls['plugins']), 'plugins', $vuls);
		}

		// collect themes vulnerabilities
		if ( ! empty($vuls['themes']) ) {
			$this->arrayIterate(array_keys((array)$vuls['themes']), 'themes', $vuls);
		}

		// filter out the dismissed items
		if ( ! $show_dismissed ) {
			$this->notices = array_filter($this->notices, function ($v) {
				return (0 === $v['dismissed']);
			}, ARRAY_FILTER_USE_BOTH);
		}

		// filter out inactive items
		$this->notices = array_filter($this->notices, function ($v) use ($vuls) {
			return $this->isActive($v, $vuls);
		});

	}

	/**
	 * Show admin notice
	 * @return void
	 */
	public function showNotifications(): void {
		$user = get_user_by('id', get_current_user_id());

		if ( ! $user->has_cap('update_core') ||
			! $user->has_cap('update_themes') ||
			! $user->has_cap('update_plugins') ) {
			return;
		}

		// check screen
		$screen = get_current_screen();
		if ( $screen->id === '_page_onecom-wp-health-monitor' ) {
			return;
		}

		// get notices to display
		$this->prepareNotifications();

		// exit if no notice found
		if ( empty($this->notices) ) {
			return;
		}

		// render notices
		echo $this->notificationHTML();
	}

	/**
	 * Dismiss notifications
	 */
	public function dismissNotifications() {
		if ( isset($_POST['action']) && $_POST['action'] === 'ocvm_dismissNotification' ) {
			$response = array();
			//set WP transient as per
			if ( isset($_POST['dismisstype']) ) {
				$dismisstype = $_POST['dismisstype'];

				set_site_transient($dismisstype, 1, 0);
				$response['dismissSetFor'] = $_POST['dismisstype'];
				$response['success']       = true;
			} else {
				$response['dismissSetFor'] = '';
				$response['success']       = false;
			}
			wp_send_json($response);
		}
	}
}